TSL's operations (copy a variable's value
to a register and then set this variable to
'1'), and the fact it's an atomic instruction
(the process executing TSL won't be interrumpted
until TSL is done) can be used as in the
code above to creat a "lock variable".
A process executing this code will keep LOCK's
old value (consider it's start value is '0') in
the 'R0' register and set 'LOCK' to '1' (thus
locking it). If LOCK's value was '0' before TSL,
the process won't stop at the JNE (Jump if Not
Equal) instruction and can keep going.
Otherwise, if LOCK's value was '1' (meaning
another process locked it), the process will
loop inside "Enter_Region" until LOCK is set to
'0' again (likely by the process who locked it).


You can probably better understand how this works
by looking at the simulator present in this program,
which shows four processes competing for the critical
region using the code shown here.